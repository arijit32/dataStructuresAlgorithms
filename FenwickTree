// using unsigned short size (16 bits) for the maximum no of elements allowed
// Fenwick tree to compute sum of start to end index
// can be easily modified via use of tuples to include other statistics such as average

#include <iostream>
#include <vector>
#include <algorithm>
#include <bitset>
#include <cmath>
#include <tuple>

using namespace std;

template <class T>
class FenwickTree 
{
	private:
		// start position, end position, result (sum in this case)
		vector<tuple<unsigned short, unsigned short, T>> FenwickTreeArray;
		vector<T> inputVect;

		void FenwickPopulateEfficient(unsigned short inputLocation, unsigned short allOrOne)
		{

			FenwickTreeArray.resize(inputVect.size() + 1);

			unsigned short i, j, ii;
			bitset<16> bitRepresentation;

			if (allOrOne == 1)
			{
				for (i = 0; i < inputVect.size(); ++i)
				{

					j = i + 1;
					get <2>(FenwickTreeArray[j]) += inputVect[i];

					bitRepresentation = j;
					for (ii = 0; ii < bitRepresentation.size(); ++ii) { if (bitRepresentation[ii] == 1) break; }
					bitRepresentation[ii] = 0; get <0>(FenwickTreeArray[j]) = (unsigned short)bitRepresentation.to_ulong();
					for (ii = 0; ii < 16; ++ii) if (j == get <0>(FenwickTreeArray[j]) + pow(2, ii)) break;
					get <1>(FenwickTreeArray[j]) = get <0>(FenwickTreeArray[j]) + pow(2, ii);

					j = j + (twosComplement(j) & (j));

					while (j < FenwickTreeArray.size())
					{
						get <2>(FenwickTreeArray[j]) += inputVect[i];

						j = j + (twosComplement(j) & (j));
					}
				}
			}
			else
			{
				// no outer for loop for single update
				i = inputLocation;
				j = i + 1;
				get <2>(FenwickTreeArray[j]) += get <2>(FenwickTreeArray[0]);
				
				j = j + (twosComplement(j) & (j));

				while (j < FenwickTreeArray.size())
				{
					get <2>(FenwickTreeArray[j]) += get <2>(FenwickTreeArray[0]);

					j = j + (twosComplement(j) & (j));
				}

				get <2>(FenwickTreeArray[0]) = 0;
			}
		}

	public:

		unsigned short twosComplement(unsigned short input);

		void insertInInputArray(T input) { inputVect.push_back(input); }

		void FenwickTreeCreate() {	FenwickPopulateEfficient(0, 1);	}

		void FenwickTreeUpdate(unsigned short location, unsigned short updatedValue)
		{
			get <2>(FenwickTreeArray[0]) = updatedValue - inputVect[location];
			inputVect[location] = updatedValue;
			FenwickPopulateEfficient(location, 0);
		}

		T FenwickTreeReturnSum(unsigned short arrIndex);

} ;

template <class T>
unsigned short FenwickTree<T>::twosComplement(unsigned short input)
{

	unsigned short i, j, result;

	bitset<16> bitRepresentation;
	bitRepresentation = input;

	for (i = 0; i < bitRepresentation.size(); ++i)
	{
		if (bitRepresentation[bitRepresentation.size() - 1 - i] == 1)
		{
			j = bitRepresentation.size() - 1 - i;
			break;
		}
	}

	for (i = 0; i <= j; ++i) { if (bitRepresentation[i] == 1) bitRepresentation[i] = 0; else bitRepresentation[i] = 1; }

	result = (unsigned short)bitRepresentation.to_ulong();
	return result + 1;

}

template <class T>
T FenwickTree<T>::FenwickTreeReturnSum(unsigned short arrIndex)
{
	unsigned short i = arrIndex + 1;
	T result = T();
	bitset<16> bitRepresentation = i;

	while (i > 0)
	{
		result += get <2>(FenwickTreeArray[i]);

		for (i = 0; i < bitRepresentation.size(); ++i) { if (bitRepresentation[i] == 1) break; }
		bitRepresentation[i] = 0; i = (unsigned short)bitRepresentation.to_ulong();
	}

	return result;
}

int main()
{		
	FenwickTree<int> Ftree;

	Ftree.insertInInputArray(3);
	Ftree.insertInInputArray(2);
	Ftree.insertInInputArray(-1);
	Ftree.insertInInputArray(6);
	Ftree.insertInInputArray(5);
	Ftree.insertInInputArray(4);
	Ftree.insertInInputArray(-3);
	Ftree.insertInInputArray(3);
	Ftree.insertInInputArray(7);
	Ftree.insertInInputArray(2);
	Ftree.insertInInputArray(3);
	Ftree.FenwickTreeCreate();

	// location is 4 and the value is updated from 5 to 3
	Ftree.FenwickTreeUpdate(4, 3);

	// return sum, in this case of all elements
	auto result = Ftree.FenwickTreeReturnSum(10);

	return 0;
}
