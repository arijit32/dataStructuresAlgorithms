// Program for both hashing and Bloom filter
// using maxSlots for Bloom filter row size

#include <iostream>
#include <vector>
#include <cmath>
#include <tuple>
#include <list>
#include <string>
#include <functional>
#include <ctime>   
#define ll long long 
#define maxSlots 50287 
#define bloomTupleSize 8

using namespace std;

class hashTable
{
	vector<list<tuple<string, int>>> hashSlots;
	vector<ll> primeNos;
	hash<string> stringHasher;
	vector<unsigned int> bloomFilterColumnMultipliers;
	unsigned long int hashSlotsSize, hashTableLoad;

public:
	hashTable()
	{
		hashSlotsSize = 857;
		hashSlots.resize(hashSlotsSize);
		sieve_atkinsModified(maxSlots);

		srand(time(NULL));
		//v1 = rand() % 100;
	}
	int noOfSlots() { return hashSlots.size(); }

	// this function is obtained online
	void sieve_atkinsModified(ll int n)
	{
		vector<bool> is_prime(n + 1);
		int remainder;

		is_prime[2] = true;
		is_prime[3] = true;

		for (ll int i = 5; i <= n; i++) is_prime[i] = false;

		ll int lim = ceil(sqrt(n));
		for (ll int x = 1; x <= lim; x++)
		{
			for (ll int y = 1; y <= lim; y++)
			{
				ll int num = (4 * x * x + y * y);
				if (num <= n && (num % 12 == 1 || num % 12 == 5)) is_prime[num] = true;
				num = (3 * x * x + y * y);
				if (num <= n && (num % 12 == 7)) is_prime[num] = true;

				if (x > y)
				{
					num = (3 * x * x - y * y);
					if (num <= n && (num % 12 == 11)) is_prime[num] = true;
				}
			}
		}

		for (ll int i = 5; i <= lim; i++) if (is_prime[i]) for (ll int j = i * i; j <= n; j += i) is_prime[j] = false;

		for (ll int i = 2; i <= n; i++)
		{
			remainder = i % 10;
			if (remainder == 3 || remainder == 7) if (is_prime[i]) primeNos.push_back(i);
		}
	}

	void insert(tuple<string, int> inputTuple)
	{
		unsigned long int slot;

		auto hashedString = stringHasher(get <0>(inputTuple));
		slot = hashedString % hashSlotsSize;
		hashSlots[slot].push_back(inputTuple);
		++hashTableLoad;
	}
};

int main()
{
	int a;
	unsigned int choice, b;
	hashTable hTable;

	hTable.insert(make_tuple("Demetrius D'Souza", 40));
	hTable.insert(make_tuple("Arijit Dasgupta", 40));
	hTable.insert(make_tuple("Gaurav Malhotra", 40));
	hTable.insert(make_tuple("Danielle Woods", 20));

	//exit loop when tree operations are over
	while (1)
	{
		cout << endl << endl << " Hash Table Operations " << endl << " ----------------------------- " << endl << " 1. Insertion/Creation " << endl << " 2. In-Order Traversal " << endl << " 3. Pre-Order Traversal " << endl << " 4. Post-Order Traversal " << endl << " 5. Node Deletion " << endl << " 6. Get Ith order statistic " << endl << " 7. Rank of input element " << endl << " 8. Exit " << endl << " Enter your choice : ";
		cin >> choice;
		switch (choice)
		{
		case 1:
			cout << " Enter data to be inserted : ";


			break;
		case 2:
			cout << endl << " Enter data to be searched " << endl;
			cout << " -------------------" << endl;

			break;
		case 3:
			cout << endl << " Enter data to be deleted " << endl << " -------------------" << endl;

			break;
		case 4:
			cout << endl << " Load Factor " << endl << " --------------------" << endl;

			break;
		case 5:
			cout << endl << " Number of slots " << endl << " --------------------" << endl;

			break;
		case 6:
			return 0;
		}
	}


	return 0;
}
