#include <iostream>
#include <tuple>
#include <vector> 
#include <queue>
#include <functional>
#include <string>
#include <memory>

using namespace std;

class binarySearchTree
{
	public:

		struct treeNode
		{
			char data;
			shared_ptr<treeNode> left, right;
		};

		shared_ptr<treeNode> root;

		void setRoot(char a)
		{
			root = make_shared<treeNode>();
			(*root).data = a;
		}

		void mergeSubTrees(const shared_ptr<binarySearchTree>& nodeA, const shared_ptr<binarySearchTree>& nodeB)
		{
			root = make_shared<treeNode>();
			(*root).left = (*nodeA).root; (*root).right = (*nodeB).root;
		}

		void inOrder(shared_ptr<treeNode> tNodeCurr, vector<tuple<char, string>>& huffmanCodes, string& tempStr)
		{

			if (tNodeCurr)
			{
				if ((*tNodeCurr).data) huffmanCodes.push_back(make_tuple((*tNodeCurr).data, tempStr));
				if ((*tNodeCurr).left)
				{
					tempStr += "0";
					inOrder((*tNodeCurr).left, huffmanCodes, tempStr);
					tempStr.pop_back();
				}				
				if ((*tNodeCurr).right)
				{
					tempStr += "1";
					inOrder((*tNodeCurr).right, huffmanCodes, tempStr);
					tempStr.pop_back();
				}
			}
			else return;
		}

};

vector<tuple<char, string>> generateHuffmanCodes(const vector<tuple<int, char>>& characterList)
{
	vector<tuple<char, string>> huffmanCodes;

	if (characterList.size() > 1)
	{
		int i, j;
		string tempStr;

		priority_queue<tuple<int, shared_ptr<binarySearchTree>>, vector<tuple<int, shared_ptr<binarySearchTree>>>, greater<tuple<int, shared_ptr<binarySearchTree>>> > characterListPQ1, characterListPQ2;
		shared_ptr<binarySearchTree> binarySearchTreePtr1 = make_shared<binarySearchTree>(), binarySearchTreePtr2;
		
		auto characterListIterator = characterList.cbegin();
		for (; characterListIterator != characterList.end(); ++characterListIterator)
		{
			(*binarySearchTreePtr1).setRoot(get <1>(*characterListIterator)); 
			characterListPQ1.push(make_tuple(get <0>(*characterListIterator), make_shared<binarySearchTree>(*binarySearchTreePtr1)));
		}
		 
		binarySearchTreePtr1 = NULL;

		while (characterListPQ1.size() + characterListPQ2.size() > 1)
		{
			if (characterListPQ1.size() == 0)
			{ 
				i = get <0>(characterListPQ2.top()); binarySearchTreePtr1 = get <1>(characterListPQ2.top());
				characterListPQ2.pop();
				j = get <0>(characterListPQ2.top()); binarySearchTreePtr2 = get <1>(characterListPQ2.top());				
				characterListPQ2.pop();
			}
			else if (characterListPQ2.size() == 0)
			{ 
				i = get <0>(characterListPQ1.top()); binarySearchTreePtr1 = get <1>(characterListPQ1.top());
				characterListPQ1.pop();
				j = get <0>(characterListPQ1.top()); binarySearchTreePtr2 = get <1>(characterListPQ1.top());
				characterListPQ1.pop();
			}
			else
			{ 
				if (get <0>(characterListPQ1.top()) < get <0>(characterListPQ2.top()))
				{
					i = get <0>(characterListPQ1.top()); binarySearchTreePtr1 = get <1>(characterListPQ1.top());
					characterListPQ1.pop();					
				}
				else
				{
					i = get <0>(characterListPQ2.top()); binarySearchTreePtr1 = get <1>(characterListPQ2.top());
					characterListPQ2.pop();
				}

				if (characterListPQ1.size() == 0)
				{
					j = get <0>(characterListPQ2.top()); binarySearchTreePtr2 = get <1>(characterListPQ2.top());
					characterListPQ2.pop();
				}
				else
				{
					if (characterListPQ2.size() == 0)
					{
						j = get <0>(characterListPQ1.top()); binarySearchTreePtr2 = get <1>(characterListPQ1.top());
						characterListPQ1.pop();
					}
					else
					{
						if (get <0>(characterListPQ1.top()) < get <0>(characterListPQ2.top()))
						{
							j = get <0>(characterListPQ1.top()); binarySearchTreePtr2 = get <1>(characterListPQ1.top());
							characterListPQ1.pop();
						}
						else
						{
							j = get <0>(characterListPQ2.top());
							binarySearchTreePtr2 = get <1>(characterListPQ2.top());
							characterListPQ2.pop();
						}
					}
				}
								
			}
			shared_ptr<binarySearchTree> binaryMergedSearchTreePtr = make_shared<binarySearchTree>();
			(*binaryMergedSearchTreePtr).mergeSubTrees(binarySearchTreePtr1, binarySearchTreePtr2);
			characterListPQ2.push(make_tuple(i + j, binaryMergedSearchTreePtr));
		}

		if (characterListPQ1.size() == 1) binarySearchTreePtr1 = get <1>(characterListPQ1.top());
		else binarySearchTreePtr1 = get <1>(characterListPQ2.top());
		(*binarySearchTreePtr1).inOrder((*binarySearchTreePtr1).root, huffmanCodes, tempStr);
	}

	return huffmanCodes;
}

int main()
{
	vector<tuple<int, char>> characterList(6);
	characterList[0] = make_tuple(3, 'A');
	characterList[1] = make_tuple(2, 'B');
	characterList[2] = make_tuple(6, 'C');
	characterList[3] = make_tuple(8, 'D');
	characterList[4] = make_tuple(2, 'E');
	characterList[5] = make_tuple(6, 'F');
	sort(characterList.begin(), characterList.end(), less<tuple<int, char>>());
	
	auto huffmanCodes = generateHuffmanCodes(characterList);
	
	return 0;
}

