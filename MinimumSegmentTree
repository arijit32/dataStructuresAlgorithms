#include <iostream>
#include <vector>
#include <algorithm>
#include <limits> // for numeric_limits

using namespace std;

void createSegmentTree(const vector<int>& input, vector<int>& segmentTree, unsigned int start, unsigned int end, unsigned int pos)
{
	if (start == end) segmentTree[pos] = input[start];
	else
	{
		int mid = (start + end) / 2;
		createSegmentTree(input, segmentTree, start, mid, (2 * pos) + 1);
		createSegmentTree(input, segmentTree, mid + 1, end, (2 * pos) + 2);

		segmentTree[pos] = min(segmentTree[(2 * pos) + 1], segmentTree[(2 * pos) + 2]);
	}
}

int querySegmentTree(const vector<int>& segmentTree, int qStart, int qEnd, int start, int end, int pos)
{
	if ((qStart <= start) && (qEnd >= end)) return segmentTree[pos];
	else if ((qStart > end) || (qEnd < start)) return numeric_limits<int>::max();
	else
	{
		int mid = (start + end) / 2;

		return min(querySegmentTree(segmentTree, qStart, qEnd, start, mid, (2 * pos) + 1), querySegmentTree(segmentTree, qStart, qEnd, mid + 1, end, (2 * pos) + 2));
	}
}

unsigned int upper_power_of_two(unsigned int v)
{
	v--;
	v |= v >> 1;
	v |= v >> 2;
	v |= v >> 4;
	v |= v >> 8;
	v |= v >> 16;
	v++;
	return v;

}

int main()
{		
	vector<int> inputVect;
	inputVect.push_back(-1);
	inputVect.push_back(2);
	inputVect.push_back(4);
	inputVect.push_back(0);
	inputVect.push_back(-5);
		
	// code below handles segmentTree array size for all input sizes, not necessarily powers of 2
	vector<int> segmentTree(( 2 * upper_power_of_two(inputVect.size())) - 1);

	createSegmentTree(inputVect, segmentTree, 0, inputVect.size() - 1, 0);
	auto result = querySegmentTree(segmentTree, 1, 3, 0, inputVect.size() - 1, 0);

	return 0;
}
